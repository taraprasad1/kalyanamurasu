/**
 * Copyright (c) 2000-2012 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.matrimony.profile.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.matrimony.profile.model.Profile;
import com.matrimony.profile.model.ProfileModel;
import com.matrimony.profile.model.ProfileSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Profile service. Represents a row in the &quot;matrimony_profile&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.matrimony.profile.model.ProfileModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ProfileImpl}.
 * </p>
 *
 * @author matrimony
 * @see ProfileImpl
 * @see com.matrimony.profile.model.Profile
 * @see com.matrimony.profile.model.ProfileModel
 * @generated
 */
@JSON(strict = true)
public class ProfileModelImpl extends BaseModelImpl<Profile>
	implements ProfileModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a profile model instance should use the {@link com.matrimony.profile.model.Profile} interface instead.
	 */
	public static final String TABLE_NAME = "matrimony_profile";
	public static final Object[][] TABLE_COLUMNS = {
			{ "profileId", Types.BIGINT },
			{ "profileCode", Types.VARCHAR },
			{ "createdForMy", Types.VARCHAR },
			{ "name", Types.VARCHAR },
			{ "gender", Types.BOOLEAN },
			{ "birthDateWithTime", Types.TIMESTAMP },
			{ "rasi", Types.VARCHAR },
			{ "star", Types.VARCHAR },
			{ "dosam", Types.VARCHAR },
			{ "religion", Types.VARCHAR },
			{ "caste", Types.VARCHAR },
			{ "subCaste", Types.VARCHAR },
			{ "height", Types.VARCHAR },
			{ "weight", Types.VARCHAR },
			{ "complexion", Types.VARCHAR },
			{ "motherTongue", Types.VARCHAR },
			{ "languageKnown", Types.VARCHAR },
			{ "maritalStatus", Types.VARCHAR },
			{ "children", Types.INTEGER },
			{ "country", Types.VARCHAR },
			{ "state_", Types.VARCHAR },
			{ "city", Types.VARCHAR },
			{ "address", Types.VARCHAR },
			{ "pinCode", Types.VARCHAR },
			{ "phone", Types.VARCHAR },
			{ "mobile", Types.VARCHAR },
			{ "emailAddress", Types.VARCHAR },
			{ "education", Types.VARCHAR },
			{ "profession", Types.VARCHAR },
			{ "currency_", Types.VARCHAR },
			{ "annualIncome", Types.VARCHAR },
			{ "hobbies", Types.VARCHAR },
			{ "aboutMe", Types.VARCHAR },
			{ "familyValue", Types.VARCHAR },
			{ "familyType", Types.VARCHAR },
			{ "familyStatus", Types.VARCHAR },
			{ "securityCode", Types.VARCHAR },
			{ "photoSecurityCode", Types.VARCHAR },
			{ "lastLoggedIn", Types.TIMESTAMP },
			{ "status", Types.INTEGER },
			{ "scheme", Types.INTEGER },
			{ "horoscope", Types.BOOLEAN },
			{ "createdBy", Types.BIGINT },
			{ "modifiedBy", Types.BIGINT },
			{ "createdDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "companyId", Types.BIGINT },
			{ "groupId", Types.BIGINT }
		};
	public static final String TABLE_SQL_CREATE = "create table matrimony_profile (profileId LONG not null primary key IDENTITY,profileCode VARCHAR(75) null,createdForMy VARCHAR(75) null,name VARCHAR(75) null,gender BOOLEAN,birthDateWithTime DATE null,rasi VARCHAR(75) null,star VARCHAR(75) null,dosam VARCHAR(75) null,religion VARCHAR(75) null,caste VARCHAR(75) null,subCaste VARCHAR(75) null,height VARCHAR(75) null,weight VARCHAR(75) null,complexion VARCHAR(75) null,motherTongue VARCHAR(75) null,languageKnown VARCHAR(75) null,maritalStatus VARCHAR(75) null,children INTEGER,country VARCHAR(75) null,state_ VARCHAR(75) null,city VARCHAR(75) null,address VARCHAR(75) null,pinCode VARCHAR(75) null,phone VARCHAR(75) null,mobile VARCHAR(75) null,emailAddress VARCHAR(75) null,education VARCHAR(75) null,profession VARCHAR(75) null,currency_ VARCHAR(75) null,annualIncome VARCHAR(75) null,hobbies VARCHAR(75) null,aboutMe VARCHAR(75) null,familyValue VARCHAR(75) null,familyType VARCHAR(75) null,familyStatus VARCHAR(75) null,securityCode VARCHAR(75) null,photoSecurityCode VARCHAR(75) null,lastLoggedIn DATE null,status INTEGER,scheme INTEGER,horoscope BOOLEAN,createdBy LONG,modifiedBy LONG,createdDate DATE null,modifiedDate DATE null,companyId LONG,groupId LONG)";
	public static final String TABLE_SQL_DROP = "drop table matrimony_profile";
	public static final String ORDER_BY_JPQL = " ORDER BY profile.modifiedDate DESC";
	public static final String ORDER_BY_SQL = " ORDER BY matrimony_profile.modifiedDate DESC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.matrimony.profile.model.Profile"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.matrimony.profile.model.Profile"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.matrimony.profile.model.Profile"),
			true);
	public static long CREATEDBY_COLUMN_BITMASK = 1L;
	public static long STATUS_COLUMN_BITMASK = 2L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Profile toModel(ProfileSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Profile model = new ProfileImpl();

		model.setProfileId(soapModel.getProfileId());
		model.setProfileCode(soapModel.getProfileCode());
		model.setCreatedForMy(soapModel.getCreatedForMy());
		model.setName(soapModel.getName());
		model.setGender(soapModel.getGender());
		model.setBirthDateWithTime(soapModel.getBirthDateWithTime());
		model.setRasi(soapModel.getRasi());
		model.setStar(soapModel.getStar());
		model.setDosam(soapModel.getDosam());
		model.setReligion(soapModel.getReligion());
		model.setCaste(soapModel.getCaste());
		model.setSubCaste(soapModel.getSubCaste());
		model.setHeight(soapModel.getHeight());
		model.setWeight(soapModel.getWeight());
		model.setComplexion(soapModel.getComplexion());
		model.setMotherTongue(soapModel.getMotherTongue());
		model.setLanguageKnown(soapModel.getLanguageKnown());
		model.setMaritalStatus(soapModel.getMaritalStatus());
		model.setChildren(soapModel.getChildren());
		model.setCountry(soapModel.getCountry());
		model.setState(soapModel.getState());
		model.setCity(soapModel.getCity());
		model.setAddress(soapModel.getAddress());
		model.setPinCode(soapModel.getPinCode());
		model.setPhone(soapModel.getPhone());
		model.setMobile(soapModel.getMobile());
		model.setEmailAddress(soapModel.getEmailAddress());
		model.setEducation(soapModel.getEducation());
		model.setProfession(soapModel.getProfession());
		model.setCurrency(soapModel.getCurrency());
		model.setAnnualIncome(soapModel.getAnnualIncome());
		model.setHobbies(soapModel.getHobbies());
		model.setAboutMe(soapModel.getAboutMe());
		model.setFamilyValue(soapModel.getFamilyValue());
		model.setFamilyType(soapModel.getFamilyType());
		model.setFamilyStatus(soapModel.getFamilyStatus());
		model.setSecurityCode(soapModel.getSecurityCode());
		model.setPhotoSecurityCode(soapModel.getPhotoSecurityCode());
		model.setLastLoggedIn(soapModel.getLastLoggedIn());
		model.setStatus(soapModel.getStatus());
		model.setScheme(soapModel.getScheme());
		model.setHoroscope(soapModel.getHoroscope());
		model.setCreatedBy(soapModel.getCreatedBy());
		model.setModifiedBy(soapModel.getModifiedBy());
		model.setCreatedDate(soapModel.getCreatedDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setCompanyId(soapModel.getCompanyId());
		model.setGroupId(soapModel.getGroupId());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Profile> toModels(ProfileSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Profile> models = new ArrayList<Profile>(soapModels.length);

		for (ProfileSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.matrimony.profile.model.Profile"));

	public ProfileModelImpl() {
	}

	public long getPrimaryKey() {
		return _profileId;
	}

	public void setPrimaryKey(long primaryKey) {
		setProfileId(primaryKey);
	}

	public Serializable getPrimaryKeyObj() {
		return new Long(_profileId);
	}

	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	public Class<?> getModelClass() {
		return Profile.class;
	}

	public String getModelClassName() {
		return Profile.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("profileId", getProfileId());
		attributes.put("profileCode", getProfileCode());
		attributes.put("createdForMy", getCreatedForMy());
		attributes.put("name", getName());
		attributes.put("gender", getGender());
		attributes.put("birthDateWithTime", getBirthDateWithTime());
		attributes.put("rasi", getRasi());
		attributes.put("star", getStar());
		attributes.put("dosam", getDosam());
		attributes.put("religion", getReligion());
		attributes.put("caste", getCaste());
		attributes.put("subCaste", getSubCaste());
		attributes.put("height", getHeight());
		attributes.put("weight", getWeight());
		attributes.put("complexion", getComplexion());
		attributes.put("motherTongue", getMotherTongue());
		attributes.put("languageKnown", getLanguageKnown());
		attributes.put("maritalStatus", getMaritalStatus());
		attributes.put("children", getChildren());
		attributes.put("country", getCountry());
		attributes.put("state", getState());
		attributes.put("city", getCity());
		attributes.put("address", getAddress());
		attributes.put("pinCode", getPinCode());
		attributes.put("phone", getPhone());
		attributes.put("mobile", getMobile());
		attributes.put("emailAddress", getEmailAddress());
		attributes.put("education", getEducation());
		attributes.put("profession", getProfession());
		attributes.put("currency", getCurrency());
		attributes.put("annualIncome", getAnnualIncome());
		attributes.put("hobbies", getHobbies());
		attributes.put("aboutMe", getAboutMe());
		attributes.put("familyValue", getFamilyValue());
		attributes.put("familyType", getFamilyType());
		attributes.put("familyStatus", getFamilyStatus());
		attributes.put("securityCode", getSecurityCode());
		attributes.put("photoSecurityCode", getPhotoSecurityCode());
		attributes.put("lastLoggedIn", getLastLoggedIn());
		attributes.put("status", getStatus());
		attributes.put("scheme", getScheme());
		attributes.put("horoscope", getHoroscope());
		attributes.put("createdBy", getCreatedBy());
		attributes.put("modifiedBy", getModifiedBy());
		attributes.put("createdDate", getCreatedDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("companyId", getCompanyId());
		attributes.put("groupId", getGroupId());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long profileId = (Long)attributes.get("profileId");

		if (profileId != null) {
			setProfileId(profileId);
		}

		String profileCode = (String)attributes.get("profileCode");

		if (profileCode != null) {
			setProfileCode(profileCode);
		}

		String createdForMy = (String)attributes.get("createdForMy");

		if (createdForMy != null) {
			setCreatedForMy(createdForMy);
		}

		String name = (String)attributes.get("name");

		if (name != null) {
			setName(name);
		}

		Boolean gender = (Boolean)attributes.get("gender");

		if (gender != null) {
			setGender(gender);
		}

		Date birthDateWithTime = (Date)attributes.get("birthDateWithTime");

		if (birthDateWithTime != null) {
			setBirthDateWithTime(birthDateWithTime);
		}

		String rasi = (String)attributes.get("rasi");

		if (rasi != null) {
			setRasi(rasi);
		}

		String star = (String)attributes.get("star");

		if (star != null) {
			setStar(star);
		}

		String dosam = (String)attributes.get("dosam");

		if (dosam != null) {
			setDosam(dosam);
		}

		String religion = (String)attributes.get("religion");

		if (religion != null) {
			setReligion(religion);
		}

		String caste = (String)attributes.get("caste");

		if (caste != null) {
			setCaste(caste);
		}

		String subCaste = (String)attributes.get("subCaste");

		if (subCaste != null) {
			setSubCaste(subCaste);
		}

		String height = (String)attributes.get("height");

		if (height != null) {
			setHeight(height);
		}

		String weight = (String)attributes.get("weight");

		if (weight != null) {
			setWeight(weight);
		}

		String complexion = (String)attributes.get("complexion");

		if (complexion != null) {
			setComplexion(complexion);
		}

		String motherTongue = (String)attributes.get("motherTongue");

		if (motherTongue != null) {
			setMotherTongue(motherTongue);
		}

		String languageKnown = (String)attributes.get("languageKnown");

		if (languageKnown != null) {
			setLanguageKnown(languageKnown);
		}

		String maritalStatus = (String)attributes.get("maritalStatus");

		if (maritalStatus != null) {
			setMaritalStatus(maritalStatus);
		}

		Integer children = (Integer)attributes.get("children");

		if (children != null) {
			setChildren(children);
		}

		String country = (String)attributes.get("country");

		if (country != null) {
			setCountry(country);
		}

		String state = (String)attributes.get("state");

		if (state != null) {
			setState(state);
		}

		String city = (String)attributes.get("city");

		if (city != null) {
			setCity(city);
		}

		String address = (String)attributes.get("address");

		if (address != null) {
			setAddress(address);
		}

		String pinCode = (String)attributes.get("pinCode");

		if (pinCode != null) {
			setPinCode(pinCode);
		}

		String phone = (String)attributes.get("phone");

		if (phone != null) {
			setPhone(phone);
		}

		String mobile = (String)attributes.get("mobile");

		if (mobile != null) {
			setMobile(mobile);
		}

		String emailAddress = (String)attributes.get("emailAddress");

		if (emailAddress != null) {
			setEmailAddress(emailAddress);
		}

		String education = (String)attributes.get("education");

		if (education != null) {
			setEducation(education);
		}

		String profession = (String)attributes.get("profession");

		if (profession != null) {
			setProfession(profession);
		}

		String currency = (String)attributes.get("currency");

		if (currency != null) {
			setCurrency(currency);
		}

		String annualIncome = (String)attributes.get("annualIncome");

		if (annualIncome != null) {
			setAnnualIncome(annualIncome);
		}

		String hobbies = (String)attributes.get("hobbies");

		if (hobbies != null) {
			setHobbies(hobbies);
		}

		String aboutMe = (String)attributes.get("aboutMe");

		if (aboutMe != null) {
			setAboutMe(aboutMe);
		}

		String familyValue = (String)attributes.get("familyValue");

		if (familyValue != null) {
			setFamilyValue(familyValue);
		}

		String familyType = (String)attributes.get("familyType");

		if (familyType != null) {
			setFamilyType(familyType);
		}

		String familyStatus = (String)attributes.get("familyStatus");

		if (familyStatus != null) {
			setFamilyStatus(familyStatus);
		}

		String securityCode = (String)attributes.get("securityCode");

		if (securityCode != null) {
			setSecurityCode(securityCode);
		}

		String photoSecurityCode = (String)attributes.get("photoSecurityCode");

		if (photoSecurityCode != null) {
			setPhotoSecurityCode(photoSecurityCode);
		}

		Date lastLoggedIn = (Date)attributes.get("lastLoggedIn");

		if (lastLoggedIn != null) {
			setLastLoggedIn(lastLoggedIn);
		}

		Integer status = (Integer)attributes.get("status");

		if (status != null) {
			setStatus(status);
		}

		Integer scheme = (Integer)attributes.get("scheme");

		if (scheme != null) {
			setScheme(scheme);
		}

		Boolean horoscope = (Boolean)attributes.get("horoscope");

		if (horoscope != null) {
			setHoroscope(horoscope);
		}

		Long createdBy = (Long)attributes.get("createdBy");

		if (createdBy != null) {
			setCreatedBy(createdBy);
		}

		Long modifiedBy = (Long)attributes.get("modifiedBy");

		if (modifiedBy != null) {
			setModifiedBy(modifiedBy);
		}

		Date createdDate = (Date)attributes.get("createdDate");

		if (createdDate != null) {
			setCreatedDate(createdDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}
	}

	@JSON
	public long getProfileId() {
		return _profileId;
	}

	public void setProfileId(long profileId) {
		_profileId = profileId;
	}

	@JSON
	public String getProfileCode() {
		if (_profileCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _profileCode;
		}
	}

	public void setProfileCode(String profileCode) {
		_profileCode = profileCode;
	}

	@JSON
	public String getCreatedForMy() {
		if (_createdForMy == null) {
			return StringPool.BLANK;
		}
		else {
			return _createdForMy;
		}
	}

	public void setCreatedForMy(String createdForMy) {
		_createdForMy = createdForMy;
	}

	@JSON
	public String getName() {
		if (_name == null) {
			return StringPool.BLANK;
		}
		else {
			return _name;
		}
	}

	public void setName(String name) {
		_name = name;
	}

	@JSON
	public boolean getGender() {
		return _gender;
	}

	public boolean isGender() {
		return _gender;
	}

	public void setGender(boolean gender) {
		_gender = gender;
	}

	@JSON
	public Date getBirthDateWithTime() {
		return _birthDateWithTime;
	}

	public void setBirthDateWithTime(Date birthDateWithTime) {
		_birthDateWithTime = birthDateWithTime;
	}

	@JSON
	public String getRasi() {
		if (_rasi == null) {
			return StringPool.BLANK;
		}
		else {
			return _rasi;
		}
	}

	public void setRasi(String rasi) {
		_rasi = rasi;
	}

	@JSON
	public String getStar() {
		if (_star == null) {
			return StringPool.BLANK;
		}
		else {
			return _star;
		}
	}

	public void setStar(String star) {
		_star = star;
	}

	@JSON
	public String getDosam() {
		if (_dosam == null) {
			return StringPool.BLANK;
		}
		else {
			return _dosam;
		}
	}

	public void setDosam(String dosam) {
		_dosam = dosam;
	}

	@JSON
	public String getReligion() {
		if (_religion == null) {
			return StringPool.BLANK;
		}
		else {
			return _religion;
		}
	}

	public void setReligion(String religion) {
		_religion = religion;
	}

	@JSON
	public String getCaste() {
		if (_caste == null) {
			return StringPool.BLANK;
		}
		else {
			return _caste;
		}
	}

	public void setCaste(String caste) {
		_caste = caste;
	}

	@JSON
	public String getSubCaste() {
		if (_subCaste == null) {
			return StringPool.BLANK;
		}
		else {
			return _subCaste;
		}
	}

	public void setSubCaste(String subCaste) {
		_subCaste = subCaste;
	}

	@JSON
	public String getHeight() {
		if (_height == null) {
			return StringPool.BLANK;
		}
		else {
			return _height;
		}
	}

	public void setHeight(String height) {
		_height = height;
	}

	@JSON
	public String getWeight() {
		if (_weight == null) {
			return StringPool.BLANK;
		}
		else {
			return _weight;
		}
	}

	public void setWeight(String weight) {
		_weight = weight;
	}

	@JSON
	public String getComplexion() {
		if (_complexion == null) {
			return StringPool.BLANK;
		}
		else {
			return _complexion;
		}
	}

	public void setComplexion(String complexion) {
		_complexion = complexion;
	}

	@JSON
	public String getMotherTongue() {
		if (_motherTongue == null) {
			return StringPool.BLANK;
		}
		else {
			return _motherTongue;
		}
	}

	public void setMotherTongue(String motherTongue) {
		_motherTongue = motherTongue;
	}

	@JSON
	public String getLanguageKnown() {
		if (_languageKnown == null) {
			return StringPool.BLANK;
		}
		else {
			return _languageKnown;
		}
	}

	public void setLanguageKnown(String languageKnown) {
		_languageKnown = languageKnown;
	}

	@JSON
	public String getMaritalStatus() {
		if (_maritalStatus == null) {
			return StringPool.BLANK;
		}
		else {
			return _maritalStatus;
		}
	}

	public void setMaritalStatus(String maritalStatus) {
		_maritalStatus = maritalStatus;
	}

	@JSON
	public int getChildren() {
		return _children;
	}

	public void setChildren(int children) {
		_children = children;
	}

	@JSON
	public String getCountry() {
		if (_country == null) {
			return StringPool.BLANK;
		}
		else {
			return _country;
		}
	}

	public void setCountry(String country) {
		_country = country;
	}

	@JSON
	public String getState() {
		if (_state == null) {
			return StringPool.BLANK;
		}
		else {
			return _state;
		}
	}

	public void setState(String state) {
		_state = state;
	}

	@JSON
	public String getCity() {
		if (_city == null) {
			return StringPool.BLANK;
		}
		else {
			return _city;
		}
	}

	public void setCity(String city) {
		_city = city;
	}

	@JSON
	public String getAddress() {
		if (_address == null) {
			return StringPool.BLANK;
		}
		else {
			return _address;
		}
	}

	public void setAddress(String address) {
		_address = address;
	}

	@JSON
	public String getPinCode() {
		if (_pinCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _pinCode;
		}
	}

	public void setPinCode(String pinCode) {
		_pinCode = pinCode;
	}

	@JSON
	public String getPhone() {
		if (_phone == null) {
			return StringPool.BLANK;
		}
		else {
			return _phone;
		}
	}

	public void setPhone(String phone) {
		_phone = phone;
	}

	@JSON
	public String getMobile() {
		if (_mobile == null) {
			return StringPool.BLANK;
		}
		else {
			return _mobile;
		}
	}

	public void setMobile(String mobile) {
		_mobile = mobile;
	}

	@JSON
	public String getEmailAddress() {
		if (_emailAddress == null) {
			return StringPool.BLANK;
		}
		else {
			return _emailAddress;
		}
	}

	public void setEmailAddress(String emailAddress) {
		_emailAddress = emailAddress;
	}

	@JSON
	public String getEducation() {
		if (_education == null) {
			return StringPool.BLANK;
		}
		else {
			return _education;
		}
	}

	public void setEducation(String education) {
		_education = education;
	}

	@JSON
	public String getProfession() {
		if (_profession == null) {
			return StringPool.BLANK;
		}
		else {
			return _profession;
		}
	}

	public void setProfession(String profession) {
		_profession = profession;
	}

	@JSON
	public String getCurrency() {
		if (_currency == null) {
			return StringPool.BLANK;
		}
		else {
			return _currency;
		}
	}

	public void setCurrency(String currency) {
		_currency = currency;
	}

	@JSON
	public String getAnnualIncome() {
		if (_annualIncome == null) {
			return StringPool.BLANK;
		}
		else {
			return _annualIncome;
		}
	}

	public void setAnnualIncome(String annualIncome) {
		_annualIncome = annualIncome;
	}

	@JSON
	public String getHobbies() {
		if (_hobbies == null) {
			return StringPool.BLANK;
		}
		else {
			return _hobbies;
		}
	}

	public void setHobbies(String hobbies) {
		_hobbies = hobbies;
	}

	@JSON
	public String getAboutMe() {
		if (_aboutMe == null) {
			return StringPool.BLANK;
		}
		else {
			return _aboutMe;
		}
	}

	public void setAboutMe(String aboutMe) {
		_aboutMe = aboutMe;
	}

	@JSON
	public String getFamilyValue() {
		if (_familyValue == null) {
			return StringPool.BLANK;
		}
		else {
			return _familyValue;
		}
	}

	public void setFamilyValue(String familyValue) {
		_familyValue = familyValue;
	}

	@JSON
	public String getFamilyType() {
		if (_familyType == null) {
			return StringPool.BLANK;
		}
		else {
			return _familyType;
		}
	}

	public void setFamilyType(String familyType) {
		_familyType = familyType;
	}

	@JSON
	public String getFamilyStatus() {
		if (_familyStatus == null) {
			return StringPool.BLANK;
		}
		else {
			return _familyStatus;
		}
	}

	public void setFamilyStatus(String familyStatus) {
		_familyStatus = familyStatus;
	}

	@JSON
	public String getSecurityCode() {
		if (_securityCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _securityCode;
		}
	}

	public void setSecurityCode(String securityCode) {
		_securityCode = securityCode;
	}

	@JSON
	public String getPhotoSecurityCode() {
		if (_photoSecurityCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _photoSecurityCode;
		}
	}

	public void setPhotoSecurityCode(String photoSecurityCode) {
		_photoSecurityCode = photoSecurityCode;
	}

	@JSON
	public Date getLastLoggedIn() {
		return _lastLoggedIn;
	}

	public void setLastLoggedIn(Date lastLoggedIn) {
		_lastLoggedIn = lastLoggedIn;
	}

	@JSON
	public int getStatus() {
		return _status;
	}

	public void setStatus(int status) {
		_columnBitmask |= STATUS_COLUMN_BITMASK;

		if (!_setOriginalStatus) {
			_setOriginalStatus = true;

			_originalStatus = _status;
		}

		_status = status;
	}

	public int getOriginalStatus() {
		return _originalStatus;
	}

	@JSON
	public int getScheme() {
		return _scheme;
	}

	public void setScheme(int scheme) {
		_scheme = scheme;
	}

	@JSON
	public boolean getHoroscope() {
		return _horoscope;
	}

	public boolean isHoroscope() {
		return _horoscope;
	}

	public void setHoroscope(boolean horoscope) {
		_horoscope = horoscope;
	}

	@JSON
	public long getCreatedBy() {
		return _createdBy;
	}

	public void setCreatedBy(long createdBy) {
		_columnBitmask |= CREATEDBY_COLUMN_BITMASK;

		if (!_setOriginalCreatedBy) {
			_setOriginalCreatedBy = true;

			_originalCreatedBy = _createdBy;
		}

		_createdBy = createdBy;
	}

	public long getOriginalCreatedBy() {
		return _originalCreatedBy;
	}

	@JSON
	public long getModifiedBy() {
		return _modifiedBy;
	}

	public void setModifiedBy(long modifiedBy) {
		_modifiedBy = modifiedBy;
	}

	@JSON
	public Date getCreatedDate() {
		return _createdDate;
	}

	public void setCreatedDate(Date createdDate) {
		_createdDate = createdDate;
	}

	@JSON
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public void setModifiedDate(Date modifiedDate) {
		_columnBitmask = -1L;

		_modifiedDate = modifiedDate;
	}

	@JSON
	public long getCompanyId() {
		return _companyId;
	}

	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@JSON
	public long getGroupId() {
		return _groupId;
	}

	public void setGroupId(long groupId) {
		_groupId = groupId;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			Profile.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Profile toEscapedModel() {
		if (_escapedModelProxy == null) {
			_escapedModelProxy = (Profile)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelProxyInterfaces,
					new AutoEscapeBeanHandler(this));
		}

		return _escapedModelProxy;
	}

	@Override
	public Object clone() {
		ProfileImpl profileImpl = new ProfileImpl();

		profileImpl.setProfileId(getProfileId());
		profileImpl.setProfileCode(getProfileCode());
		profileImpl.setCreatedForMy(getCreatedForMy());
		profileImpl.setName(getName());
		profileImpl.setGender(getGender());
		profileImpl.setBirthDateWithTime(getBirthDateWithTime());
		profileImpl.setRasi(getRasi());
		profileImpl.setStar(getStar());
		profileImpl.setDosam(getDosam());
		profileImpl.setReligion(getReligion());
		profileImpl.setCaste(getCaste());
		profileImpl.setSubCaste(getSubCaste());
		profileImpl.setHeight(getHeight());
		profileImpl.setWeight(getWeight());
		profileImpl.setComplexion(getComplexion());
		profileImpl.setMotherTongue(getMotherTongue());
		profileImpl.setLanguageKnown(getLanguageKnown());
		profileImpl.setMaritalStatus(getMaritalStatus());
		profileImpl.setChildren(getChildren());
		profileImpl.setCountry(getCountry());
		profileImpl.setState(getState());
		profileImpl.setCity(getCity());
		profileImpl.setAddress(getAddress());
		profileImpl.setPinCode(getPinCode());
		profileImpl.setPhone(getPhone());
		profileImpl.setMobile(getMobile());
		profileImpl.setEmailAddress(getEmailAddress());
		profileImpl.setEducation(getEducation());
		profileImpl.setProfession(getProfession());
		profileImpl.setCurrency(getCurrency());
		profileImpl.setAnnualIncome(getAnnualIncome());
		profileImpl.setHobbies(getHobbies());
		profileImpl.setAboutMe(getAboutMe());
		profileImpl.setFamilyValue(getFamilyValue());
		profileImpl.setFamilyType(getFamilyType());
		profileImpl.setFamilyStatus(getFamilyStatus());
		profileImpl.setSecurityCode(getSecurityCode());
		profileImpl.setPhotoSecurityCode(getPhotoSecurityCode());
		profileImpl.setLastLoggedIn(getLastLoggedIn());
		profileImpl.setStatus(getStatus());
		profileImpl.setScheme(getScheme());
		profileImpl.setHoroscope(getHoroscope());
		profileImpl.setCreatedBy(getCreatedBy());
		profileImpl.setModifiedBy(getModifiedBy());
		profileImpl.setCreatedDate(getCreatedDate());
		profileImpl.setModifiedDate(getModifiedDate());
		profileImpl.setCompanyId(getCompanyId());
		profileImpl.setGroupId(getGroupId());

		profileImpl.resetOriginalValues();

		return profileImpl;
	}

	public int compareTo(Profile profile) {
		int value = 0;

		value = DateUtil.compareTo(getModifiedDate(), profile.getModifiedDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		Profile profile = null;

		try {
			profile = (Profile)obj;
		}
		catch (ClassCastException cce) {
			return false;
		}

		long primaryKey = profile.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		ProfileModelImpl profileModelImpl = this;

		profileModelImpl._originalStatus = profileModelImpl._status;

		profileModelImpl._setOriginalStatus = false;

		profileModelImpl._originalCreatedBy = profileModelImpl._createdBy;

		profileModelImpl._setOriginalCreatedBy = false;

		profileModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Profile> toCacheModel() {
		ProfileCacheModel profileCacheModel = new ProfileCacheModel();

		profileCacheModel.profileId = getProfileId();

		profileCacheModel.profileCode = getProfileCode();

		String profileCode = profileCacheModel.profileCode;

		if ((profileCode != null) && (profileCode.length() == 0)) {
			profileCacheModel.profileCode = null;
		}

		profileCacheModel.createdForMy = getCreatedForMy();

		String createdForMy = profileCacheModel.createdForMy;

		if ((createdForMy != null) && (createdForMy.length() == 0)) {
			profileCacheModel.createdForMy = null;
		}

		profileCacheModel.name = getName();

		String name = profileCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			profileCacheModel.name = null;
		}

		profileCacheModel.gender = getGender();

		Date birthDateWithTime = getBirthDateWithTime();

		if (birthDateWithTime != null) {
			profileCacheModel.birthDateWithTime = birthDateWithTime.getTime();
		}
		else {
			profileCacheModel.birthDateWithTime = Long.MIN_VALUE;
		}

		profileCacheModel.rasi = getRasi();

		String rasi = profileCacheModel.rasi;

		if ((rasi != null) && (rasi.length() == 0)) {
			profileCacheModel.rasi = null;
		}

		profileCacheModel.star = getStar();

		String star = profileCacheModel.star;

		if ((star != null) && (star.length() == 0)) {
			profileCacheModel.star = null;
		}

		profileCacheModel.dosam = getDosam();

		String dosam = profileCacheModel.dosam;

		if ((dosam != null) && (dosam.length() == 0)) {
			profileCacheModel.dosam = null;
		}

		profileCacheModel.religion = getReligion();

		String religion = profileCacheModel.religion;

		if ((religion != null) && (religion.length() == 0)) {
			profileCacheModel.religion = null;
		}

		profileCacheModel.caste = getCaste();

		String caste = profileCacheModel.caste;

		if ((caste != null) && (caste.length() == 0)) {
			profileCacheModel.caste = null;
		}

		profileCacheModel.subCaste = getSubCaste();

		String subCaste = profileCacheModel.subCaste;

		if ((subCaste != null) && (subCaste.length() == 0)) {
			profileCacheModel.subCaste = null;
		}

		profileCacheModel.height = getHeight();

		String height = profileCacheModel.height;

		if ((height != null) && (height.length() == 0)) {
			profileCacheModel.height = null;
		}

		profileCacheModel.weight = getWeight();

		String weight = profileCacheModel.weight;

		if ((weight != null) && (weight.length() == 0)) {
			profileCacheModel.weight = null;
		}

		profileCacheModel.complexion = getComplexion();

		String complexion = profileCacheModel.complexion;

		if ((complexion != null) && (complexion.length() == 0)) {
			profileCacheModel.complexion = null;
		}

		profileCacheModel.motherTongue = getMotherTongue();

		String motherTongue = profileCacheModel.motherTongue;

		if ((motherTongue != null) && (motherTongue.length() == 0)) {
			profileCacheModel.motherTongue = null;
		}

		profileCacheModel.languageKnown = getLanguageKnown();

		String languageKnown = profileCacheModel.languageKnown;

		if ((languageKnown != null) && (languageKnown.length() == 0)) {
			profileCacheModel.languageKnown = null;
		}

		profileCacheModel.maritalStatus = getMaritalStatus();

		String maritalStatus = profileCacheModel.maritalStatus;

		if ((maritalStatus != null) && (maritalStatus.length() == 0)) {
			profileCacheModel.maritalStatus = null;
		}

		profileCacheModel.children = getChildren();

		profileCacheModel.country = getCountry();

		String country = profileCacheModel.country;

		if ((country != null) && (country.length() == 0)) {
			profileCacheModel.country = null;
		}

		profileCacheModel.state = getState();

		String state = profileCacheModel.state;

		if ((state != null) && (state.length() == 0)) {
			profileCacheModel.state = null;
		}

		profileCacheModel.city = getCity();

		String city = profileCacheModel.city;

		if ((city != null) && (city.length() == 0)) {
			profileCacheModel.city = null;
		}

		profileCacheModel.address = getAddress();

		String address = profileCacheModel.address;

		if ((address != null) && (address.length() == 0)) {
			profileCacheModel.address = null;
		}

		profileCacheModel.pinCode = getPinCode();

		String pinCode = profileCacheModel.pinCode;

		if ((pinCode != null) && (pinCode.length() == 0)) {
			profileCacheModel.pinCode = null;
		}

		profileCacheModel.phone = getPhone();

		String phone = profileCacheModel.phone;

		if ((phone != null) && (phone.length() == 0)) {
			profileCacheModel.phone = null;
		}

		profileCacheModel.mobile = getMobile();

		String mobile = profileCacheModel.mobile;

		if ((mobile != null) && (mobile.length() == 0)) {
			profileCacheModel.mobile = null;
		}

		profileCacheModel.emailAddress = getEmailAddress();

		String emailAddress = profileCacheModel.emailAddress;

		if ((emailAddress != null) && (emailAddress.length() == 0)) {
			profileCacheModel.emailAddress = null;
		}

		profileCacheModel.education = getEducation();

		String education = profileCacheModel.education;

		if ((education != null) && (education.length() == 0)) {
			profileCacheModel.education = null;
		}

		profileCacheModel.profession = getProfession();

		String profession = profileCacheModel.profession;

		if ((profession != null) && (profession.length() == 0)) {
			profileCacheModel.profession = null;
		}

		profileCacheModel.currency = getCurrency();

		String currency = profileCacheModel.currency;

		if ((currency != null) && (currency.length() == 0)) {
			profileCacheModel.currency = null;
		}

		profileCacheModel.annualIncome = getAnnualIncome();

		String annualIncome = profileCacheModel.annualIncome;

		if ((annualIncome != null) && (annualIncome.length() == 0)) {
			profileCacheModel.annualIncome = null;
		}

		profileCacheModel.hobbies = getHobbies();

		String hobbies = profileCacheModel.hobbies;

		if ((hobbies != null) && (hobbies.length() == 0)) {
			profileCacheModel.hobbies = null;
		}

		profileCacheModel.aboutMe = getAboutMe();

		String aboutMe = profileCacheModel.aboutMe;

		if ((aboutMe != null) && (aboutMe.length() == 0)) {
			profileCacheModel.aboutMe = null;
		}

		profileCacheModel.familyValue = getFamilyValue();

		String familyValue = profileCacheModel.familyValue;

		if ((familyValue != null) && (familyValue.length() == 0)) {
			profileCacheModel.familyValue = null;
		}

		profileCacheModel.familyType = getFamilyType();

		String familyType = profileCacheModel.familyType;

		if ((familyType != null) && (familyType.length() == 0)) {
			profileCacheModel.familyType = null;
		}

		profileCacheModel.familyStatus = getFamilyStatus();

		String familyStatus = profileCacheModel.familyStatus;

		if ((familyStatus != null) && (familyStatus.length() == 0)) {
			profileCacheModel.familyStatus = null;
		}

		profileCacheModel.securityCode = getSecurityCode();

		String securityCode = profileCacheModel.securityCode;

		if ((securityCode != null) && (securityCode.length() == 0)) {
			profileCacheModel.securityCode = null;
		}

		profileCacheModel.photoSecurityCode = getPhotoSecurityCode();

		String photoSecurityCode = profileCacheModel.photoSecurityCode;

		if ((photoSecurityCode != null) && (photoSecurityCode.length() == 0)) {
			profileCacheModel.photoSecurityCode = null;
		}

		Date lastLoggedIn = getLastLoggedIn();

		if (lastLoggedIn != null) {
			profileCacheModel.lastLoggedIn = lastLoggedIn.getTime();
		}
		else {
			profileCacheModel.lastLoggedIn = Long.MIN_VALUE;
		}

		profileCacheModel.status = getStatus();

		profileCacheModel.scheme = getScheme();

		profileCacheModel.horoscope = getHoroscope();

		profileCacheModel.createdBy = getCreatedBy();

		profileCacheModel.modifiedBy = getModifiedBy();

		Date createdDate = getCreatedDate();

		if (createdDate != null) {
			profileCacheModel.createdDate = createdDate.getTime();
		}
		else {
			profileCacheModel.createdDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			profileCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			profileCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		profileCacheModel.companyId = getCompanyId();

		profileCacheModel.groupId = getGroupId();

		return profileCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(97);

		sb.append("{profileId=");
		sb.append(getProfileId());
		sb.append(", profileCode=");
		sb.append(getProfileCode());
		sb.append(", createdForMy=");
		sb.append(getCreatedForMy());
		sb.append(", name=");
		sb.append(getName());
		sb.append(", gender=");
		sb.append(getGender());
		sb.append(", birthDateWithTime=");
		sb.append(getBirthDateWithTime());
		sb.append(", rasi=");
		sb.append(getRasi());
		sb.append(", star=");
		sb.append(getStar());
		sb.append(", dosam=");
		sb.append(getDosam());
		sb.append(", religion=");
		sb.append(getReligion());
		sb.append(", caste=");
		sb.append(getCaste());
		sb.append(", subCaste=");
		sb.append(getSubCaste());
		sb.append(", height=");
		sb.append(getHeight());
		sb.append(", weight=");
		sb.append(getWeight());
		sb.append(", complexion=");
		sb.append(getComplexion());
		sb.append(", motherTongue=");
		sb.append(getMotherTongue());
		sb.append(", languageKnown=");
		sb.append(getLanguageKnown());
		sb.append(", maritalStatus=");
		sb.append(getMaritalStatus());
		sb.append(", children=");
		sb.append(getChildren());
		sb.append(", country=");
		sb.append(getCountry());
		sb.append(", state=");
		sb.append(getState());
		sb.append(", city=");
		sb.append(getCity());
		sb.append(", address=");
		sb.append(getAddress());
		sb.append(", pinCode=");
		sb.append(getPinCode());
		sb.append(", phone=");
		sb.append(getPhone());
		sb.append(", mobile=");
		sb.append(getMobile());
		sb.append(", emailAddress=");
		sb.append(getEmailAddress());
		sb.append(", education=");
		sb.append(getEducation());
		sb.append(", profession=");
		sb.append(getProfession());
		sb.append(", currency=");
		sb.append(getCurrency());
		sb.append(", annualIncome=");
		sb.append(getAnnualIncome());
		sb.append(", hobbies=");
		sb.append(getHobbies());
		sb.append(", aboutMe=");
		sb.append(getAboutMe());
		sb.append(", familyValue=");
		sb.append(getFamilyValue());
		sb.append(", familyType=");
		sb.append(getFamilyType());
		sb.append(", familyStatus=");
		sb.append(getFamilyStatus());
		sb.append(", securityCode=");
		sb.append(getSecurityCode());
		sb.append(", photoSecurityCode=");
		sb.append(getPhotoSecurityCode());
		sb.append(", lastLoggedIn=");
		sb.append(getLastLoggedIn());
		sb.append(", status=");
		sb.append(getStatus());
		sb.append(", scheme=");
		sb.append(getScheme());
		sb.append(", horoscope=");
		sb.append(getHoroscope());
		sb.append(", createdBy=");
		sb.append(getCreatedBy());
		sb.append(", modifiedBy=");
		sb.append(getModifiedBy());
		sb.append(", createdDate=");
		sb.append(getCreatedDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(148);

		sb.append("<model><model-name>");
		sb.append("com.matrimony.profile.model.Profile");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>profileId</column-name><column-value><![CDATA[");
		sb.append(getProfileId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>profileCode</column-name><column-value><![CDATA[");
		sb.append(getProfileCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createdForMy</column-name><column-value><![CDATA[");
		sb.append(getCreatedForMy());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>name</column-name><column-value><![CDATA[");
		sb.append(getName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>gender</column-name><column-value><![CDATA[");
		sb.append(getGender());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>birthDateWithTime</column-name><column-value><![CDATA[");
		sb.append(getBirthDateWithTime());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>rasi</column-name><column-value><![CDATA[");
		sb.append(getRasi());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>star</column-name><column-value><![CDATA[");
		sb.append(getStar());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>dosam</column-name><column-value><![CDATA[");
		sb.append(getDosam());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>religion</column-name><column-value><![CDATA[");
		sb.append(getReligion());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>caste</column-name><column-value><![CDATA[");
		sb.append(getCaste());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>subCaste</column-name><column-value><![CDATA[");
		sb.append(getSubCaste());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>height</column-name><column-value><![CDATA[");
		sb.append(getHeight());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>weight</column-name><column-value><![CDATA[");
		sb.append(getWeight());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>complexion</column-name><column-value><![CDATA[");
		sb.append(getComplexion());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>motherTongue</column-name><column-value><![CDATA[");
		sb.append(getMotherTongue());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>languageKnown</column-name><column-value><![CDATA[");
		sb.append(getLanguageKnown());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>maritalStatus</column-name><column-value><![CDATA[");
		sb.append(getMaritalStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>children</column-name><column-value><![CDATA[");
		sb.append(getChildren());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>country</column-name><column-value><![CDATA[");
		sb.append(getCountry());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>state</column-name><column-value><![CDATA[");
		sb.append(getState());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>city</column-name><column-value><![CDATA[");
		sb.append(getCity());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>address</column-name><column-value><![CDATA[");
		sb.append(getAddress());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>pinCode</column-name><column-value><![CDATA[");
		sb.append(getPinCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>phone</column-name><column-value><![CDATA[");
		sb.append(getPhone());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>mobile</column-name><column-value><![CDATA[");
		sb.append(getMobile());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>emailAddress</column-name><column-value><![CDATA[");
		sb.append(getEmailAddress());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>education</column-name><column-value><![CDATA[");
		sb.append(getEducation());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>profession</column-name><column-value><![CDATA[");
		sb.append(getProfession());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>currency</column-name><column-value><![CDATA[");
		sb.append(getCurrency());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>annualIncome</column-name><column-value><![CDATA[");
		sb.append(getAnnualIncome());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>hobbies</column-name><column-value><![CDATA[");
		sb.append(getHobbies());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>aboutMe</column-name><column-value><![CDATA[");
		sb.append(getAboutMe());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>familyValue</column-name><column-value><![CDATA[");
		sb.append(getFamilyValue());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>familyType</column-name><column-value><![CDATA[");
		sb.append(getFamilyType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>familyStatus</column-name><column-value><![CDATA[");
		sb.append(getFamilyStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>securityCode</column-name><column-value><![CDATA[");
		sb.append(getSecurityCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>photoSecurityCode</column-name><column-value><![CDATA[");
		sb.append(getPhotoSecurityCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>lastLoggedIn</column-name><column-value><![CDATA[");
		sb.append(getLastLoggedIn());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>status</column-name><column-value><![CDATA[");
		sb.append(getStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>scheme</column-name><column-value><![CDATA[");
		sb.append(getScheme());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>horoscope</column-name><column-value><![CDATA[");
		sb.append(getHoroscope());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createdBy</column-name><column-value><![CDATA[");
		sb.append(getCreatedBy());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedBy</column-name><column-value><![CDATA[");
		sb.append(getModifiedBy());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createdDate</column-name><column-value><![CDATA[");
		sb.append(getCreatedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = Profile.class.getClassLoader();
	private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
			Profile.class
		};
	private long _profileId;
	private String _profileCode;
	private String _createdForMy;
	private String _name;
	private boolean _gender;
	private Date _birthDateWithTime;
	private String _rasi;
	private String _star;
	private String _dosam;
	private String _religion;
	private String _caste;
	private String _subCaste;
	private String _height;
	private String _weight;
	private String _complexion;
	private String _motherTongue;
	private String _languageKnown;
	private String _maritalStatus;
	private int _children;
	private String _country;
	private String _state;
	private String _city;
	private String _address;
	private String _pinCode;
	private String _phone;
	private String _mobile;
	private String _emailAddress;
	private String _education;
	private String _profession;
	private String _currency;
	private String _annualIncome;
	private String _hobbies;
	private String _aboutMe;
	private String _familyValue;
	private String _familyType;
	private String _familyStatus;
	private String _securityCode;
	private String _photoSecurityCode;
	private Date _lastLoggedIn;
	private int _status;
	private int _originalStatus;
	private boolean _setOriginalStatus;
	private int _scheme;
	private boolean _horoscope;
	private long _createdBy;
	private long _originalCreatedBy;
	private boolean _setOriginalCreatedBy;
	private long _modifiedBy;
	private Date _createdDate;
	private Date _modifiedDate;
	private long _companyId;
	private long _groupId;
	private long _columnBitmask;
	private Profile _escapedModelProxy;
}