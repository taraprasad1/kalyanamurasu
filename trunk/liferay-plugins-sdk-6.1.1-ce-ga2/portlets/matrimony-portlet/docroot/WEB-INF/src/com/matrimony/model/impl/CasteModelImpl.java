/**
 * Copyright (c) 2000-2012 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.matrimony.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.matrimony.model.Caste;
import com.matrimony.model.CasteModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the Caste service. Represents a row in the &quot;matrimony_caste&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.matrimony.model.CasteModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link CasteImpl}.
 * </p>
 *
 * @author matrimony
 * @see CasteImpl
 * @see com.matrimony.model.Caste
 * @see com.matrimony.model.CasteModel
 * @generated
 */
public class CasteModelImpl extends BaseModelImpl<Caste> implements CasteModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a caste model instance should use the {@link com.matrimony.model.Caste} interface instead.
	 */
	public static final String TABLE_NAME = "matrimony_caste";
	public static final Object[][] TABLE_COLUMNS = {
			{ "casteId", Types.BIGINT },
			{ "religionId", Types.BIGINT },
			{ "name", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table matrimony_caste (casteId LONG not null primary key,religionId LONG,name VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table matrimony_caste";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.matrimony.model.Caste"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.matrimony.model.Caste"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.matrimony.model.Caste"),
			true);
	public static long RELIGIONID_COLUMN_BITMASK = 1L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.matrimony.model.Caste"));

	public CasteModelImpl() {
	}

	public long getPrimaryKey() {
		return _casteId;
	}

	public void setPrimaryKey(long primaryKey) {
		setCasteId(primaryKey);
	}

	public Serializable getPrimaryKeyObj() {
		return new Long(_casteId);
	}

	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	public Class<?> getModelClass() {
		return Caste.class;
	}

	public String getModelClassName() {
		return Caste.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("casteId", getCasteId());
		attributes.put("religionId", getReligionId());
		attributes.put("name", getName());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long casteId = (Long)attributes.get("casteId");

		if (casteId != null) {
			setCasteId(casteId);
		}

		Long religionId = (Long)attributes.get("religionId");

		if (religionId != null) {
			setReligionId(religionId);
		}

		String name = (String)attributes.get("name");

		if (name != null) {
			setName(name);
		}
	}

	public long getCasteId() {
		return _casteId;
	}

	public void setCasteId(long casteId) {
		_casteId = casteId;
	}

	public long getReligionId() {
		return _religionId;
	}

	public void setReligionId(long religionId) {
		_columnBitmask |= RELIGIONID_COLUMN_BITMASK;

		if (!_setOriginalReligionId) {
			_setOriginalReligionId = true;

			_originalReligionId = _religionId;
		}

		_religionId = religionId;
	}

	public long getOriginalReligionId() {
		return _originalReligionId;
	}

	public String getName() {
		if (_name == null) {
			return StringPool.BLANK;
		}
		else {
			return _name;
		}
	}

	public void setName(String name) {
		_name = name;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			Caste.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Caste toEscapedModel() {
		if (_escapedModelProxy == null) {
			_escapedModelProxy = (Caste)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelProxyInterfaces,
					new AutoEscapeBeanHandler(this));
		}

		return _escapedModelProxy;
	}

	@Override
	public Object clone() {
		CasteImpl casteImpl = new CasteImpl();

		casteImpl.setCasteId(getCasteId());
		casteImpl.setReligionId(getReligionId());
		casteImpl.setName(getName());

		casteImpl.resetOriginalValues();

		return casteImpl;
	}

	public int compareTo(Caste caste) {
		long primaryKey = caste.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		Caste caste = null;

		try {
			caste = (Caste)obj;
		}
		catch (ClassCastException cce) {
			return false;
		}

		long primaryKey = caste.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		CasteModelImpl casteModelImpl = this;

		casteModelImpl._originalReligionId = casteModelImpl._religionId;

		casteModelImpl._setOriginalReligionId = false;

		casteModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Caste> toCacheModel() {
		CasteCacheModel casteCacheModel = new CasteCacheModel();

		casteCacheModel.casteId = getCasteId();

		casteCacheModel.religionId = getReligionId();

		casteCacheModel.name = getName();

		String name = casteCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			casteCacheModel.name = null;
		}

		return casteCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(7);

		sb.append("{casteId=");
		sb.append(getCasteId());
		sb.append(", religionId=");
		sb.append(getReligionId());
		sb.append(", name=");
		sb.append(getName());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(13);

		sb.append("<model><model-name>");
		sb.append("com.matrimony.model.Caste");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>casteId</column-name><column-value><![CDATA[");
		sb.append(getCasteId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>religionId</column-name><column-value><![CDATA[");
		sb.append(getReligionId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>name</column-name><column-value><![CDATA[");
		sb.append(getName());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = Caste.class.getClassLoader();
	private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
			Caste.class
		};
	private long _casteId;
	private long _religionId;
	private long _originalReligionId;
	private boolean _setOriginalReligionId;
	private String _name;
	private long _columnBitmask;
	private Caste _escapedModelProxy;
}