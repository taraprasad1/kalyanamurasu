/**
 * Copyright (c) 2000-2012 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.matrimony.model;

import com.liferay.portal.model.BaseModel;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;

import java.io.Serializable;

import java.util.Date;

/**
 * The base model interface for the Interaction service. Represents a row in the &quot;matrimony_profile_interaction&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This interface and its corresponding implementation {@link com.matrimony.model.impl.InteractionModelImpl} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link com.matrimony.model.impl.InteractionImpl}.
 * </p>
 *
 * @author matrimony
 * @see Interaction
 * @see com.matrimony.model.impl.InteractionImpl
 * @see com.matrimony.model.impl.InteractionModelImpl
 * @generated
 */
public interface InteractionModel extends BaseModel<Interaction> {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this interface directly. All methods that expect a interaction model instance should use the {@link Interaction} interface instead.
	 */

	/**
	 * Returns the primary key of this interaction.
	 *
	 * @return the primary key of this interaction
	 */
	public long getPrimaryKey();

	/**
	 * Sets the primary key of this interaction.
	 *
	 * @param primaryKey the primary key of this interaction
	 */
	public void setPrimaryKey(long primaryKey);

	/**
	 * Returns the interaction ID of this interaction.
	 *
	 * @return the interaction ID of this interaction
	 */
	public long getInteractionId();

	/**
	 * Sets the interaction ID of this interaction.
	 *
	 * @param interactionId the interaction ID of this interaction
	 */
	public void setInteractionId(long interactionId);

	/**
	 * Returns the male ID of this interaction.
	 *
	 * @return the male ID of this interaction
	 */
	public long getMaleId();

	/**
	 * Sets the male ID of this interaction.
	 *
	 * @param maleId the male ID of this interaction
	 */
	public void setMaleId(long maleId);

	/**
	 * Returns the female ID of this interaction.
	 *
	 * @return the female ID of this interaction
	 */
	public long getFemaleId();

	/**
	 * Sets the female ID of this interaction.
	 *
	 * @param femaleId the female ID of this interaction
	 */
	public void setFemaleId(long femaleId);

	/**
	 * Returns the male last viewed female of this interaction.
	 *
	 * @return the male last viewed female of this interaction
	 */
	public Date getMaleLastViewedFemale();

	/**
	 * Sets the male last viewed female of this interaction.
	 *
	 * @param maleLastViewedFemale the male last viewed female of this interaction
	 */
	public void setMaleLastViewedFemale(Date maleLastViewedFemale);

	/**
	 * Returns the male viewed count of this interaction.
	 *
	 * @return the male viewed count of this interaction
	 */
	public int getMaleViewedCount();

	/**
	 * Sets the male viewed count of this interaction.
	 *
	 * @param maleViewedCount the male viewed count of this interaction
	 */
	public void setMaleViewedCount(int maleViewedCount);

	/**
	 * Returns the female last viewed male of this interaction.
	 *
	 * @return the female last viewed male of this interaction
	 */
	public Date getFemaleLastViewedMale();

	/**
	 * Sets the female last viewed male of this interaction.
	 *
	 * @param femaleLastViewedMale the female last viewed male of this interaction
	 */
	public void setFemaleLastViewedMale(Date femaleLastViewedMale);

	/**
	 * Returns the female viewed count of this interaction.
	 *
	 * @return the female viewed count of this interaction
	 */
	public int getFemaleViewedCount();

	/**
	 * Sets the female viewed count of this interaction.
	 *
	 * @param femaleViewedCount the female viewed count of this interaction
	 */
	public void setFemaleViewedCount(int femaleViewedCount);

	/**
	 * Returns the can view male photo of this interaction.
	 *
	 * @return the can view male photo of this interaction
	 */
	public boolean getCanViewMalePhoto();

	/**
	 * Returns <code>true</code> if this interaction is can view male photo.
	 *
	 * @return <code>true</code> if this interaction is can view male photo; <code>false</code> otherwise
	 */
	public boolean isCanViewMalePhoto();

	/**
	 * Sets whether this interaction is can view male photo.
	 *
	 * @param canViewMalePhoto the can view male photo of this interaction
	 */
	public void setCanViewMalePhoto(boolean canViewMalePhoto);

	/**
	 * Returns the can view female photo of this interaction.
	 *
	 * @return the can view female photo of this interaction
	 */
	public boolean getCanViewFemalePhoto();

	/**
	 * Returns <code>true</code> if this interaction is can view female photo.
	 *
	 * @return <code>true</code> if this interaction is can view female photo; <code>false</code> otherwise
	 */
	public boolean isCanViewFemalePhoto();

	/**
	 * Sets whether this interaction is can view female photo.
	 *
	 * @param canViewFemalePhoto the can view female photo of this interaction
	 */
	public void setCanViewFemalePhoto(boolean canViewFemalePhoto);

	/**
	 * Returns the can view male contact of this interaction.
	 *
	 * @return the can view male contact of this interaction
	 */
	public boolean getCanViewMaleContact();

	/**
	 * Returns <code>true</code> if this interaction is can view male contact.
	 *
	 * @return <code>true</code> if this interaction is can view male contact; <code>false</code> otherwise
	 */
	public boolean isCanViewMaleContact();

	/**
	 * Sets whether this interaction is can view male contact.
	 *
	 * @param canViewMaleContact the can view male contact of this interaction
	 */
	public void setCanViewMaleContact(boolean canViewMaleContact);

	/**
	 * Returns the can view female contact of this interaction.
	 *
	 * @return the can view female contact of this interaction
	 */
	public boolean getCanViewFemaleContact();

	/**
	 * Returns <code>true</code> if this interaction is can view female contact.
	 *
	 * @return <code>true</code> if this interaction is can view female contact; <code>false</code> otherwise
	 */
	public boolean isCanViewFemaleContact();

	/**
	 * Sets whether this interaction is can view female contact.
	 *
	 * @param canViewFemaleContact the can view female contact of this interaction
	 */
	public void setCanViewFemaleContact(boolean canViewFemaleContact);

	/**
	 * Returns the proposed on of this interaction.
	 *
	 * @return the proposed on of this interaction
	 */
	public Date getProposedOn();

	/**
	 * Sets the proposed on of this interaction.
	 *
	 * @param proposedOn the proposed on of this interaction
	 */
	public void setProposedOn(Date proposedOn);

	/**
	 * Returns the proposed by male of this interaction.
	 *
	 * @return the proposed by male of this interaction
	 */
	public boolean getProposedByMale();

	/**
	 * Returns <code>true</code> if this interaction is proposed by male.
	 *
	 * @return <code>true</code> if this interaction is proposed by male; <code>false</code> otherwise
	 */
	public boolean isProposedByMale();

	/**
	 * Sets whether this interaction is proposed by male.
	 *
	 * @param proposedByMale the proposed by male of this interaction
	 */
	public void setProposedByMale(boolean proposedByMale);

	/**
	 * Returns the proposal not seen of this interaction.
	 *
	 * @return the proposal not seen of this interaction
	 */
	public boolean getProposalNotSeen();

	/**
	 * Returns <code>true</code> if this interaction is proposal not seen.
	 *
	 * @return <code>true</code> if this interaction is proposal not seen; <code>false</code> otherwise
	 */
	public boolean isProposalNotSeen();

	/**
	 * Sets whether this interaction is proposal not seen.
	 *
	 * @param proposalNotSeen the proposal not seen of this interaction
	 */
	public void setProposalNotSeen(boolean proposalNotSeen);

	/**
	 * Returns the responded on of this interaction.
	 *
	 * @return the responded on of this interaction
	 */
	public Date getRespondedOn();

	/**
	 * Sets the responded on of this interaction.
	 *
	 * @param respondedOn the responded on of this interaction
	 */
	public void setRespondedOn(Date respondedOn);

	/**
	 * Returns the response type of this interaction.
	 *
	 * @return the response type of this interaction
	 */
	public int getResponseType();

	/**
	 * Sets the response type of this interaction.
	 *
	 * @param responseType the response type of this interaction
	 */
	public void setResponseType(int responseType);

	/**
	 * Returns the response not seen of this interaction.
	 *
	 * @return the response not seen of this interaction
	 */
	public boolean getResponseNotSeen();

	/**
	 * Returns <code>true</code> if this interaction is response not seen.
	 *
	 * @return <code>true</code> if this interaction is response not seen; <code>false</code> otherwise
	 */
	public boolean isResponseNotSeen();

	/**
	 * Sets whether this interaction is response not seen.
	 *
	 * @param responseNotSeen the response not seen of this interaction
	 */
	public void setResponseNotSeen(boolean responseNotSeen);

	/**
	 * Returns the shortlisted by male of this interaction.
	 *
	 * @return the shortlisted by male of this interaction
	 */
	public Date getShortlistedByMale();

	/**
	 * Sets the shortlisted by male of this interaction.
	 *
	 * @param shortlistedByMale the shortlisted by male of this interaction
	 */
	public void setShortlistedByMale(Date shortlistedByMale);

	/**
	 * Returns the shortlisted by female of this interaction.
	 *
	 * @return the shortlisted by female of this interaction
	 */
	public Date getShortlistedByFemale();

	/**
	 * Sets the shortlisted by female of this interaction.
	 *
	 * @param shortlistedByFemale the shortlisted by female of this interaction
	 */
	public void setShortlistedByFemale(Date shortlistedByFemale);

	/**
	 * Returns the blocked by male of this interaction.
	 *
	 * @return the blocked by male of this interaction
	 */
	public Date getBlockedByMale();

	/**
	 * Sets the blocked by male of this interaction.
	 *
	 * @param blockedByMale the blocked by male of this interaction
	 */
	public void setBlockedByMale(Date blockedByMale);

	/**
	 * Returns the blocked by female of this interaction.
	 *
	 * @return the blocked by female of this interaction
	 */
	public Date getBlockedByFemale();

	/**
	 * Sets the blocked by female of this interaction.
	 *
	 * @param blockedByFemale the blocked by female of this interaction
	 */
	public void setBlockedByFemale(Date blockedByFemale);

	/**
	 * Returns the captured in male report of this interaction.
	 *
	 * @return the captured in male report of this interaction
	 */
	public int getCapturedInMaleReport();

	/**
	 * Sets the captured in male report of this interaction.
	 *
	 * @param capturedInMaleReport the captured in male report of this interaction
	 */
	public void setCapturedInMaleReport(int capturedInMaleReport);

	/**
	 * Returns the captured in female report of this interaction.
	 *
	 * @return the captured in female report of this interaction
	 */
	public int getCapturedInFemaleReport();

	/**
	 * Sets the captured in female report of this interaction.
	 *
	 * @param capturedInFemaleReport the captured in female report of this interaction
	 */
	public void setCapturedInFemaleReport(int capturedInFemaleReport);

	public boolean isNew();

	public void setNew(boolean n);

	public boolean isCachedModel();

	public void setCachedModel(boolean cachedModel);

	public boolean isEscapedModel();

	public Serializable getPrimaryKeyObj();

	public void setPrimaryKeyObj(Serializable primaryKeyObj);

	public ExpandoBridge getExpandoBridge();

	public void setExpandoBridgeAttributes(ServiceContext serviceContext);

	public Object clone();

	public int compareTo(Interaction interaction);

	public int hashCode();

	public CacheModel<Interaction> toCacheModel();

	public Interaction toEscapedModel();

	public String toString();

	public String toXmlString();
}